{
  "title": "Convolutional Neural Network",
  "cells": [
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/25CF5DB70634513A449224BA619BAF2D.jpg\"><br>"
    },
    {
      "type": "text",
      "data": "The original raw image is 28X28. The convolution layer is 5X5."
    },
    {
      "type": "text",
      "data": "<br>"
    },
    {
      "type": "text",
      "data": "A TensorFlow graph consists of the following parts which will be detailed below:<div>- Placeholder variables used for inputting data to the graph</div><div>- Variables that are going to be optimized so as to make the convolutional network perform better</div><div>- The mathematical formulas for the convolutional network.</div><div>- A cost measure that can be used to guide the optimization of the variables</div><div>- An optimization method which updates the variables</div>"
    },
    {
      "type": "markdown",
      "data": "## Configuration of Neural Network"
    },
    {
      "type": "code",
      "language": "python",
      "data": "filter_size1 = 5\nnum_filters1 = 16\nfilter_size2 = 5\nnum_filters2 = 36\n\nfc_size = 128"
    },
    {
      "type": "markdown",
      "data": "## Data Dimensions"
    },
    {
      "type": "code",
      "language": "python",
      "data": "img_size = 28\n\nimg_size_flat = img_size * img_size\nimg_shape = (img_size, img_size)\n\nnun_channels = 1\n\nnum_classses = 10"
    },
    {
      "type": "markdown",
      "data": "## Placeholder variables"
    },
    {
      "type": "code",
      "language": "python",
      "data": "x = tf.placeholder(tf.float32, shape=[None, img_size_flat], name='x')\n\nx_image = tf.reshape(x, [-1, img_size, img_size, num_channels])\n\ny_true = tf.placeholder(tf.float32, shape=[None 10], name='y_true')\n\ny_true_cls = tf.argmax(y_true, dimension=1)"
    },
    {
      "type": "code",
      "language": "python",
      "data": "def new_weights(shape):\n    return tf.Variable(tf.truncated_normal(shape, stddev=0.05))"
    },
    {
      "type": "code",
      "language": "python",
      "data": "def new_biases(length):\n    return tf.Variable(tf.constant(0.05, shape=[length]))"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "markdown",
      "data": "## Convolutional Layer\n\nThis function creates a new convolutional layer in the computational graph for TensorFlow. Nothing is actually calculated here, we are just adding the mathematical formulas to the TensorFlow graph.\n\nIt is assumed that the input is a 4-dim tensor with the following dimensions:\n1. Image number\n2. Y-axis of each image\n3. X-axis of each image\n4. Channels of each image\n\nNote that the input channels may either be colour-channels, or it may be filter-channels if the input is produced from a previous convolutional layer."
    },
    {
      "type": "text",
      "data": "The output is another 4-dim tensor with the following dimensions:<div>1. Image number</div><div>2. Y-axis of each image.</div><div>3. X-axis of each image</div><div>4. Channels produced by the convolutional filters</div>"
    },
    {
      "type": "code",
      "language": "python",
      "data": "def new_conv_layer(input, # The previous layer\n                   num_input_channels, # Num. channels in pre. layer\n                   filter_size, # width and height of each filter\n                   num_filters, # number of filters\n                   use_pooling=True): # use 2X2 max-pooling\n                     \n    # Shape of the filter-weights for the convolution.\n    # This format is determined by the TensorFlow API.\n    shape = [filter_size, filter_size, num_input_channels, num_filters]\n    \n    # Create new weights aka. filters with the given shape\n    weights = new_weights(shape=shape)\n    \n    # Create new biases, on for each filter\n    biases = new_biases(length=num_filters)\n    \n    # Create the TensorFlow operation for convolution.\n    # Note the strides are set to 1 in all dimensions.\n    # The first and last stride must always be 1,\n    # because the first is for the image-number and \n    # the last is for the input-channel\n    # But e.g., strides=[1, 2, 2, 1] would mean that the filter \n    # is moved 2 pixels across the x- and y-axis of the image.\n    # The padding is set to 'SAME' which means the input image\n    # is padded with zeroes so the size of the output is the same\n    layer = tf.nn.conv2d(input=input,\n                         filter=weights,\n                         strides=[1 ,1, 1, 1],\n                         padding='SAME')\n    \n    # Add the biases to the results of the convolution\n    # A bias-value is added to each filter-channel.\n    layer += biases\n    \n    \n    if use_pooling:\n      # This is a 2X2 max-pooling, which means that we \n      # consider 2X2 windows and select the largest value\n      # in each window. Then we move 2 pixels to the next window\n      layer = tf.nn.max_pool(value=layer,\n                             ksize=[1, 2, 2, 1],\n                             strides=[1, 2, 2, 1],\n                             padding='SAME')\n    \n    # Rectified Linear Unit (ReLU)\n    # It calculates max(x, 0) for each input pixel x.\n    # This adds some non-Linearity to the formula and allows us\n    # to learn more complicated functions.\n    layer = tf.nn.relu(layer)\n    \n    # We return both the resulting layer and the filter-weights\n    # because we will plot the weights later\n    return layer, weights"
    },
    {
      "type": "markdown",
      "data": "#### fully connected layer"
    },
    {
      "type": "code",
      "language": "python",
      "data": "def new_fc_layer(input,\n                 num_inputs,\n                 num_outputs,\n                 use_relu=True):\n    \n    # Create new weights and biases\n    weights = new_weights(shape=[num_inputs,            num_outputs])\n    biases = new_biases(length=num_outputs)\n    \n    # Calculate the layer as the matrix multiplication of the input and weights, and then add the bias-values.\n    layer = tf.matmul(input, weights) + biases\n    \n    # Use ReLU?\n    if use_relu:\n        layer = tf.nn.relu(layer)\n        \n    return layer"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "markdown",
      "data": "### 建立第一層Convolution Layer\n1. num_input_channels\n2. filter_size\n3. num_filters\n4. use_pooling"
    },
    {
      "type": "code",
      "language": "python",
      "data": "layer_conv1, weights_conv1 = \n  new_conv_layer(input=x_image,\n                             num_input_channels=num_channels,\n                             filter_size=filter_size1,\n                             num_filters=num_filters1,\n                             use_pooling=True)"
    },
    {
      "type": "code",
      "language": "python",
      "data": "layer_conv2, weights_conv2 = \\\n    new_conv_layer(input=layer_conv1,\n                   num_input_channels=num_filters1,\n                   filter_size=filter_size2,\n                   num_filters=num_filters2,\n                   use_pooling=True)"
    },
    {
      "type": "code",
      "language": "python",
      "data": "layer_flat, num_features = flatten_layer(layer_conv2)"
    },
    {
      "type": "code",
      "language": "python",
      "data": "layer_fc1 = new_fc_layer(input=layer_flat,\n                         num_inputs=num_features,\n                         num_outputs=fc_size,\n                         use_relu=True)"
    },
    {
      "type": "code",
      "language": "python",
      "data": "layer_fc2 = new_fc_layer(input=layer_fc1,\n                         num_inputs=fc_size,\n                         num_outputs=num_classes,\n                         use_relu=False)"
    },
    {
      "type": "code",
      "language": "python",
      "data": "y_pred = tf.nn.softmax(layer_fc2)"
    },
    {
      "type": "code",
      "language": "python",
      "data": "y_pred_cls = tf.argmax(y_pred, dimension=1)"
    },
    {
      "type": "code",
      "language": "python",
      "data": "cross_entropy = tf.nn.softmax_cross_entropy_with_logits(logits=layer_fc2,\n                                                        labels=y_true)"
    },
    {
      "type": "code",
      "language": "python",
      "data": "cost = tf.reduce_mean(cross_entropy)"
    },
    {
      "type": "markdown",
      "data": "### Optimizer"
    },
    {
      "type": "code",
      "language": "python",
      "data": "optimizer = tf.train.AdamOptimizer(learning_rate=1e-4).minimize(cost)"
    },
    {
      "type": "markdown",
      "data": "### Perfromance Measures"
    },
    {
      "type": "code",
      "language": "python",
      "data": "correct_prediction = tf.equal(y_pred_cls, y_true_cls)"
    },
    {
      "type": "code",
      "language": "python",
      "data": "accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": "<br>"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}